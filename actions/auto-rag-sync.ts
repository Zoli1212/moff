"use server";

import { prisma } from "@/lib/prisma";
import { getTenantSafeAuth } from "@/lib/tenant-auth";
import { addRAGContext } from "./rag-context-actions";

// Automatikus RAG szinkroniz√°ci√≥ egy munk√°hoz
export async function autoSyncWorkToRAG(workId: number) {
  try {
    const { tenantEmail } = await getTenantSafeAuth();
    
    // Munka lek√©r√©se minden kapcsol√≥d√≥ adattal
    const work = await prisma.work.findUnique({
      where: { id: workId, tenantEmail },
      include: {
        workItems: true,
        workDiaries: true,
        workTools: true
      }
    });

    if (!work) {
      return { success: false, error: "Munka nem tal√°lhat√≥" };
    }

    // T√∂r√∂lj√ºk a r√©gi RAG bejegyz√©seket ehhez a munk√°hoz
    await prisma.knowledgeBase.deleteMany({
      where: {
        tenantEmail,
        metadata: {
          path: ['workId'],
          equals: workId
        }
      }
    });

    let syncedItems = 0;

    // Munka alapadatok szinkroniz√°l√°sa
    const workContent = `
Munka: ${work.title || 'Nincs c√≠m'}
Le√≠r√°s: ${work.offerDescription || 'Nincs le√≠r√°s'}
Helysz√≠n: ${work.location || 'Nincs megadva'}
Munk√°sok: ${work.totalWorkers || 0} f≈ë
Munkak√∂lts√©g: ${work.totalLaborCost || 0} Ft
Anyagk√∂lts√©g: ${work.totalMaterialCost || 0} Ft
Eszk√∂z√∂k: ${work.totalTools || 0} db
Eszk√∂zk√∂lts√©g: ${work.totalToolCost || 0} Ft
Anyagok: ${work.totalMaterials || 0} db
St√°tusz: ${work.status || 'Nincs megadva'}
Halad√°s: ${work.progress || 0}%
    `.trim();

    await addRAGContext(workContent, 'work_basic', {
      source: 'work',
      workId: work.id,
      title: work.title,
      status: work.status,
      totalWorkers: work.totalWorkers,
      totalLaborCost: work.totalLaborCost,
      lastSync: new Date().toISOString()
    });
    syncedItems++;

    // WorkItem-ek szinkroniz√°l√°sa
    for (const item of work.workItems) {
      const itemContent = `
Munkaf√°zis: ${item.name}
Mennyis√©g: ${item.quantity} ${item.unit}
Elv√©gzett: ${item.completedQuantity || 0} ${item.unit}
Progress: ${item.progress || 0}%
St√°tusz: ${item.inProgress ? 'Folyamatban' : 'Nem akt√≠v'}
Projekt: ${work.title}
      `.trim();

      await addRAGContext(itemContent, 'work_items', {
        source: 'workItem',
        workId: work.id,
        workItemId: item.id,
        workTitle: work.title,
        itemName: item.name,
        lastSync: new Date().toISOString()
      });
      syncedItems++;
    }

    console.log(`‚úÖ RAG szinkroniz√°ci√≥ k√©sz munk√°hoz (${workId}): ${syncedItems} elem`);
    
    return {
      success: true,
      message: `Munka szinkroniz√°lva RAG-be: ${syncedItems} elem`,
      syncedItems
    };

  } catch (error) {
    console.error('‚ùå Auto RAG sync hiba:', error);
    return {
      success: false,
      error: (error as Error).message
    };
  }
}

// Automatikus RAG szinkroniz√°ci√≥ egy aj√°nlathoz
export async function autoSyncOfferToRAG(offerId: number) {
  try {
    const { tenantEmail } = await getTenantSafeAuth();
    
    // Aj√°nlat lek√©r√©se
    const offer = await prisma.offer.findUnique({
      where: { id: offerId, tenantEmail }
    });

    if (!offer) {
      return { success: false, error: "Aj√°nlat nem tal√°lhat√≥" };
    }

    // T√∂r√∂lj√ºk a r√©gi RAG bejegyz√©seket ehhez az aj√°nlathoz
    await prisma.knowledgeBase.deleteMany({
      where: {
        tenantEmail,
        metadata: {
          path: ['offerId'],
          equals: offerId
        }
      }
    });

    let syncedItems = 0;

    // Aj√°nlat alapadatok szinkroniz√°l√°sa
    const offerContent = `
C√≠m: ${offer.title || 'Nincs megadva'}
Le√≠r√°s: ${offer.description || 'Nincs megadva'}
√ñssz√°r: ${offer.totalPrice} Ft
Munka √∂sszege: ${offer.workTotal || 0} Ft
Anyag √∂sszege: ${offer.materialTotal || 0} Ft
St√°tusz: ${offer.status}
Megjegyz√©sek: ${offer.notes || 'Nincs megadva'}
    `.trim();

    await addRAGContext(offerContent, 'offers', {
      source: 'offer',
      offerId: offer.id,
      title: offer.title,
      description: offer.description,
      total: offer.totalPrice,
      workTotal: offer.workTotal,
      materialTotal: offer.materialTotal,
      status: offer.status,
      notes: offer.notes,
      lastSync: new Date().toISOString()
    });
    syncedItems++;

    // Aj√°nlat t√©telek szinkroniz√°l√°sa
    if (offer.items && Array.isArray(offer.items)) {
      for (const item of offer.items as any[]) {
        const itemContent = `
T√©tel: ${item.name || 'N√©vtelen t√©tel'}
Mennyis√©g: ${item.quantity || 0} ${item.unit || 'db'}
Egys√©g√°r: ${item.unitPrice || 0} Ft
√ñsszeg: ${item.totalPrice || 0} Ft
Aj√°nlat: ${offer.title || 'Nincs c√≠m'}
        `.trim();

        await addRAGContext(itemContent, 'offer_items', {
          source: 'offerItem',
          offerId: offer.id,
          offerTitle: offer.title,
          itemName: item.name,
          lastSync: new Date().toISOString()
        });
        syncedItems++;
      }
    }

    console.log(`‚úÖ RAG szinkroniz√°ci√≥ k√©sz aj√°nlathoz (${offerId}): ${syncedItems} elem`);
    
    return {
      success: true,
      message: `Aj√°nlat szinkroniz√°lva RAG-be: ${syncedItems} elem`,
      syncedItems
    };

  } catch (error) {
    console.error('‚ùå Auto RAG sync hiba:', error);
    return {
      success: false,
      error: (error as Error).message
    };
  }
}

// H√°tt√©rben fut√≥ teljes szinkroniz√°ci√≥ (cron job-hoz)
export async function backgroundRAGSync() {
  try {
    const { tenantEmail } = await getTenantSafeAuth();
    
    console.log("üîÑ H√°tt√©r RAG szinkroniz√°ci√≥ kezd√©se...");
    
    // Legut√≥bb m√≥dos√≠tott munk√°k √©s aj√°nlatok lek√©r√©se
    const recentWorks = await prisma.work.findMany({
      where: { 
        tenantEmail,
        updatedAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Utols√≥ 24 √≥ra
        }
      },
      select: { id: true, title: true, updatedAt: true }
    });

    const recentOffers = await prisma.myWork.findMany({
      where: { 
        tenantEmail,
        updatedAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Utols√≥ 24 √≥ra
        }
      },
      select: { id: true, customerName: true, updatedAt: true }
    });

    let totalSynced = 0;

    // Munk√°k szinkroniz√°l√°sa
    for (const work of recentWorks) {
      const result = await autoSyncWorkToRAG(work.id);
      if (result.success) {
        totalSynced += result.syncedItems || 0;
      }
    }

    // Aj√°nlatok szinkroniz√°l√°sa
    for (const offer of recentOffers) {
      const result = await autoSyncOfferToRAG(offer.id);
      if (result.success) {
        totalSynced += result.syncedItems || 0;
      }
    }

    console.log(`‚úÖ H√°tt√©r RAG szinkroniz√°ci√≥ k√©sz: ${totalSynced} elem szinkroniz√°lva`);
    
    return {
      success: true,
      message: `H√°tt√©r szinkroniz√°ci√≥ k√©sz: ${totalSynced} elem`,
      worksProcessed: recentWorks.length,
      offersProcessed: recentOffers.length,
      totalSynced
    };

  } catch (error) {
    console.error('‚ùå H√°tt√©r RAG sync hiba:', error);
    return {
      success: false,
      error: (error as Error).message
    };
  }
}
