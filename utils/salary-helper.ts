'use server'

import { prisma } from '@/lib/prisma'
import { getTenantSafeAuth } from '@/lib/tenant-auth'

/**
 * Aktu√°lis fizet√©s lek√©r√©se egy adott d√°tumra
 * @param workforceRegistryId - Munk√°s ID
 * @param date - D√°tum, amire a fizet√©st keress√ºk
 * @returns A d√°tumra √©rv√©nyes napi fizet√©s
 */
export async function getCurrentSalary(workforceRegistryId: number, date: Date = new Date()): Promise<number> {
  try {
    const { tenantEmail } = await getTenantSafeAuth()

    // Keress√ºk meg a legutols√≥ fizet√©si rekordot, ami <= a megadott d√°tumn√°l
    const salaryRecord = await prisma.WorkforceRegistrySalaryHistory.findFirst({
      where: {
        workforceRegistryId,
        tenantEmail,
        validFrom: { lte: date }
      },
      orderBy: { validFrom: 'desc' }
    })

    if (salaryRecord) {
      return salaryRecord.dailyRate
    }

    // Ha nincs fizet√©st√∂rt√©net, fallback a WorkforceRegistry dailyRate-j√©re
    const workforceRegistry = await prisma.workforceRegistry.findFirst({
      where: { id: workforceRegistryId, tenantEmail }
    })

    return workforceRegistry?.dailyRate || 0
  } catch (error) {
    console.error('Error getting current salary:', error)
    return 0
  }
}

/**
 * √öj fizet√©s hozz√°ad√°sa
 * @param workforceRegistryId - Munk√°s ID
 * @param newDailyRate - √öj napi fizet√©s
 * @param validFrom - Mikort√≥l √©rv√©nyes (alap√©rtelmezett: ma)
 */
export async function addSalaryChange(
  workforceRegistryId: number, 
  newDailyRate: number, 
  validFrom: Date = new Date()
): Promise<{ success: boolean; error?: string }> {
  try {
    const { tenantEmail } = await getTenantSafeAuth()

    // Ellen≈ërizz√ºk, hogy l√©tezik-e a munk√°s
    const workforceRegistry = await prisma.workforceRegistry.findFirst({
      where: { id: workforceRegistryId, tenantEmail }
    })

    if (!workforceRegistry) {
      return { success: false, error: 'Munk√°s nem tal√°lhat√≥' }
    }

    // Ellen≈ërizz√ºk, hogy nincs-e m√°r ugyanarra a d√°tumra rekord
    const existingRecord = await prisma.workforceRegistrySalaryHistory.findFirst({
      where: {
        workforceRegistryId,
        tenantEmail,
        validFrom
      }
    })

    if (existingRecord) {
      // Ha van m√°r rekord ugyanarra a d√°tumra, friss√≠ts√ºk
      await prisma.workforceRegistrySalaryHistory.update({
        where: { id: existingRecord.id },
        data: { dailyRate: newDailyRate }
      })
    } else {
      // √öj rekord l√©trehoz√°sa
      await prisma.workforceRegistrySalaryHistory.create({
        data: {
          workforceRegistryId,
          dailyRate: newDailyRate,
          validFrom,
          tenantEmail
        }
      })
    }

    // Friss√≠ts√ºk a WorkforceRegistry dailyRate mez≈ëj√©t is (kompatibilit√°s√©rt)
    await prisma.workforceRegistry.update({
      where: { id: workforceRegistryId },
      data: { dailyRate: newDailyRate }
    })

    // AUTOMATIKUS SNAPSHOT FRISS√çT√âS: Friss√≠ts√ºk az √∂sszes √©rintett napl√≥ bejegyz√©s snapshot-j√°t
    await updateAffectedSalarySnapshots(workforceRegistryId, validFrom, tenantEmail)

    return { success: true }
  } catch (error) {
    console.error('Error adding salary change:', error)
    return { success: false, error: 'Hiba a fizet√©s ment√©se sor√°n' }
  }
}

/**
 * Automatikus snapshot friss√≠t√©s - friss√≠ti az √©rintett napl√≥ bejegyz√©sek snapshot-jait
 * @param workforceRegistryId - Munk√°s ID
 * @param validFrom - Mikort√≥l √©rv√©nyes a fizet√©sv√°ltoz√°s
 * @param tenantEmail - Tenant email
 */
async function updateAffectedSalarySnapshots(
  workforceRegistryId: number, 
  validFrom: Date, 
  tenantEmail: string
): Promise<void> {
  try {
    console.log(`üîÑ [AUTO-SYNC] Starting automatic snapshot update for worker ${workforceRegistryId} from ${validFrom.toISOString().split('T')[0]}`)

    // 1. Lek√©rj√ºk a munk√°s nev√©t
    const worker = await prisma.workforceRegistry.findFirst({
      where: { id: workforceRegistryId, tenantEmail }
    })

    if (!worker) {
      console.warn(`‚ö†Ô∏è [AUTO-SYNC] Worker ${workforceRegistryId} not found`)
      return
    }

    // 2. Lek√©rj√ºk az √∂sszes √©rintett napl√≥ bejegyz√©st (validFrom d√°tumt√≥l kezdve)
    const diaryItemsByName = await prisma.workDiaryItem.findMany({
      where: { 
        name: { equals: worker.name, mode: 'insensitive' },
        tenantEmail,
        date: { gte: validFrom }
      }
    })

    const workItemWorkerIds = await prisma.workItemWorker.findMany({
      where: { workforceRegistryId, tenantEmail },
      select: { id: true }
    })

    const diaryItemsByWorkItemWorker = workItemWorkerIds.length > 0 
      ? await prisma.workDiaryItem.findMany({
          where: { 
            workItemWorkerId: { in: workItemWorkerIds.map(w => w.id) },
            tenantEmail,
            date: { gte: validFrom }
          }
        })
      : []

    // 3. Egyes√≠tj√ºk √©s deduplik√°ljuk a bejegyz√©seket
    const allDiaryItems = new Map()
    diaryItemsByName.forEach(item => allDiaryItems.set(item.id, item))
    diaryItemsByWorkItemWorker.forEach(item => allDiaryItems.set(item.id, item))
    
    const uniqueDiaryItems = Array.from(allDiaryItems.values())

    console.log(`üìä [AUTO-SYNC] Found ${uniqueDiaryItems.length} diary items to update for ${worker.name}`)

    // 4. Friss√≠tj√ºk minden √©rintett bejegyz√©s snapshot-j√°t
    let updatedCount = 0

    for (const item of uniqueDiaryItems) {
      const itemDate = item.date || new Date()
      
      // Lek√©rj√ºk az adott napra √©rv√©nyes √∫j fizet√©st
      const correctSalary = await getCurrentSalary(workforceRegistryId, itemDate)
      
      if (item.dailyRateSnapshot !== correctSalary) {
        await prisma.workDiaryItem.update({
          where: { id: item.id },
          data: { dailyRateSnapshot: correctSalary }
        })
        
        console.log(`‚úÖ [AUTO-SYNC] Updated item ${item.id}: ${item.dailyRateSnapshot} ‚Üí ${correctSalary} Ft (${itemDate.toISOString().split('T')[0]})`)
        updatedCount++
      }
    }

    console.log(`üéâ [AUTO-SYNC] Completed for ${worker.name}: ${updatedCount} snapshots updated automatically`)

  } catch (error) {
    console.error('‚ùå [AUTO-SYNC] Error updating salary snapshots:', error)
    // Ne dobjunk hib√°t, csak loggoljuk - ne blokkoljuk a fizet√©s ment√©st
  }
}

/**
 * Fizet√©st√∂rt√©net lek√©r√©se
 * @param workforceRegistryId - Munk√°s ID
 * @returns Fizet√©st√∂rt√©net lista
 */
export async function getSalaryHistory(workforceRegistryId: number) {
  try {
    const { tenantEmail } = await getTenantSafeAuth()

    const salaryHistory = await prisma.workforceRegistrySalaryHistory.findMany({
      where: {
        workforceRegistryId,
        tenantEmail
      },
      orderBy: { validFrom: 'desc' }
    })

    return salaryHistory
  } catch (error) {
    console.error('Error getting salary history:', error)
    return []
  }
}


/**
 * Batch fizet√©s lek√©r√©s egy id≈ëszakra (optimaliz√°lt)
 * @param workerIds - Munk√°s ID-k list√°ja
 * @param startDate - Kezd≈ë d√°tum
 * @param endDate - V√©g d√°tum
 * @returns Map: workerId -> Map(date -> dailyRate)
 */
export async function getSalariesForPeriod(
  workerIds: number[], 
  startDate: Date, 
  endDate: Date
): Promise<Map<number, Map<string, number>>> {
  try {
    const { tenantEmail } = await getTenantSafeAuth()

    const salaryHistories = await prisma.workforceRegistrySalaryHistory.findMany({
      where: {
        workforceRegistryId: { in: workerIds },
        tenantEmail,
        validFrom: { lte: endDate }
      },
      orderBy: [
        { workforceRegistryId: 'asc' },
        { validFrom: 'desc' }
      ]
    })

    // Cache √©p√≠t√©se
    const salaryCache = new Map<number, Map<string, number>>()
    
    for (const workerId of workerIds) {
      const workerSalaries = salaryHistories.filter((sh: any) => sh.workforceRegistryId === workerId)
      const dateMap = new Map<string, number>()
      
      // Minden napra kisz√°m√≠tjuk a fizet√©st
      const currentDate = new Date(startDate)
      while (currentDate <= endDate) {
        const dateStr = currentDate.toISOString().split('T')[0]
        
        // Keress√ºk meg a legutols√≥ fizet√©si rekordot erre a d√°tumra
        const applicableSalary = workerSalaries.find((ws: any) => ws.validFrom <= currentDate)
        dateMap.set(dateStr, applicableSalary?.dailyRate || 0)
        
        currentDate.setDate(currentDate.getDate() + 1)
      }
      
      salaryCache.set(workerId, dateMap)
    }

    return salaryCache
  } catch (error) {
    console.error('Error getting salaries for period:', error)
    return new Map()
  }
}
