from typing import List

class Ajandek:
    def __init__(self, nev: str, suly: float, min_eletkor: int, tipus: str) -> None:
        self.nev = nev
        self.suly = suly
        self.min_eletkor = min_eletkor
        self.tipus = tipus

    def __str__(self) -> str:
        return f"Ajándék: {self.nev} (Súly: {self.suly} kg, Ajánlott kor: {self.min_eletkor}+, Típus: {self.tipus})"

class Gyerek:
    def __init__(self, nev: str, eletkor: int, viselkedes: str) -> None:
        self.nev = nev
        self.eletkor = eletkor
        if viselkedes not in ['jó', 'rossz']:
            raise ValueError("A viselkedés csak 'jó' vagy 'rossz' lehet.")
        self.viselkedes = viselkedes

    def megerdemli(self) -> bool:
        return self.viselkedes == 'jó'

class Puttony:
    def __init__(self, max_kapacitas: float) -> None:
        self.max_kapacitas = max_kapacitas
        self.tartalom: List[Ajandek] = []

    def osszsuly(self) -> float:
        suly = 0.0
        for ajandek in self.tartalom:
            suly += ajandek.suly
        return suly

    def add_ajandek(self, uj_ajandek: Ajandek) -> None:
        if self.osszsuly() + uj_ajandek.suly > self.max_kapacitas:
            raise ValueError(f"Az ajándék ({uj_ajandek.nev}) túl nehéz, nem fér a puttonyba!")
        else:
            self.tartalom.append(uj_ajandek)
            print(f"'{uj_ajandek.nev}' bekerült a puttonyba.")

    def listazas(self) -> None:
        print("\nA puttony tartalma:")
        if not self.tartalom:
            print("A puttony üres.")
        else:
            for ajandek in self.tartalom:
                print(f"- {ajandek}")

class Mikulas:
    def __init__(self, nev: str, puttony: Puttony) -> None:
        self.nev = nev
        self.puttony = puttony

    def ajandekoz(self, gyerek: Gyerek) -> str:
        if not gyerek.megerdemli():
            return f"{gyerek.nev} virgácsot kap."

        megfelelo_ajandek = None
        for ajandek in self.puttony.tartalom:
            if ajandek.min_eletkor <= gyerek.eletkor:
                megfelelo_ajandek = ajandek
                break

        if megfelelo_ajandek:
            self.puttony.tartalom.remove(megfelelo_ajandek)
            return f"{gyerek.nev} jó volt, ezért kapott egy {megfelelo_ajandek.nev}-t!"
        else:
            return f"{gyerek.nev} számára nem volt megfelelő ajándék a puttonyban."


if __name__ == "__main__":
    mikulas_puttonya = Puttony(10.0)

    ajandekok_listaja = [
        Ajandek("Plüss", 0.8, 3, "játék"),
        Ajandek("LEGO Millennium Falcon", 1.5, 6, "játék"),
        Ajandek("Harry Potter", 0.5, 10, "könyv"),
        Ajandek("táblás csoki", 0.2, 0, "édesség"),
        Ajandek("kisautó", 0.3, 3, "játék"),
        Ajandek("Regény", 8.0, 12, "könyv")
    ]

    for ajandek in ajandekok_listaja:
        try:
            mikulas_puttonya.add_ajandek(ajandek)
        except ValueError as e:
            print(f"Hiba történt: {e}")


    mikulas_puttonya.listazas()
    print(f"A puttony jelenlegi összsúlya: {mikulas_puttonya.osszsuly():.2f} kg")
    print("-" * 30)

    telapo = Mikulas("Télapó", mikulas_puttonya)

    gyerekek = [
        Gyerek("Anna", 5, "jó"),
        Gyerek("Peti", 7, "rossz"),
        Gyerek("Éva", 11, "jó"),
        Gyerek("Gergő", 4, "jó"),
        Gyerek("Lili", 12, "jó")
    ]

    print("\nKezdődik az ajándékozás!")
    for gyerek in gyerekek:
        eredmeny = telapo.ajandekoz(gyerek)
        print(eredmeny)

    mikulas_puttonya.listazas()
