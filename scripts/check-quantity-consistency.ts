import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkQuantityConsistency() {
  console.log('üîç Ellen≈ërz√©s: WorkItem.completedQuantity vs WorkDiaryItem.quantity √∂sszeg\n');

  try {
    // Minden WorkItem lek√©r√©se a kapcsol√≥d√≥ WorkDiaryItem-ekkel
    const workItems = await prisma.workItem.findMany({
      select: {
        id: true,
        name: true,
        completedQuantity: true,
        quantity: true,
        unit: true,
        workDiaryItems: {
          select: {
            id: true,
            quantity: true,
            progressAtDate: true,
            date: true,
          },
          orderBy: {
            date: 'asc'
          }
        }
      }
    });

    console.log(`üìä √ñsszesen ${workItems.length} WorkItem vizsg√°lata...\n`);

    let inconsistentCount = 0;
    let totalCount = 0;

    for (const workItem of workItems) {
      totalCount++;
      
      // Napl√≥ bejegyz√©sek quantity √∂sszege
      const diaryQuantitySum = workItem.workDiaryItems.reduce(
        (sum, diary) => sum + (diary.quantity || 0), 
        0
      );
      
      // Legut√≥bbi progressAtDate √©rt√©k
      const latestProgressAtDate = workItem.workDiaryItems.length > 0 
        ? workItem.workDiaryItems[workItem.workDiaryItems.length - 1]?.progressAtDate || 0
        : 0;

      const completedQuantity = workItem.completedQuantity || 0;
      
      // Ellen≈ërz√©s
      const isConsistent = Math.abs(completedQuantity - diaryQuantitySum) < 0.01;
      const progressConsistent = Math.abs(completedQuantity - latestProgressAtDate) < 0.01;
      
      if (!isConsistent || !progressConsistent) {
        inconsistentCount++;
        console.log(`‚ùå ELT√âR√âS - ${workItem.name} (ID: ${workItem.id})`);
        console.log(`   üìã WorkItem.completedQuantity: ${completedQuantity} ${workItem.unit}`);
        console.log(`   üìù Napl√≥ quantity √∂sszeg: ${diaryQuantitySum} ${workItem.unit}`);
        console.log(`   üìÖ Legut√≥bbi progressAtDate: ${latestProgressAtDate} ${workItem.unit}`);
        console.log(`   üî¢ Napl√≥ bejegyz√©sek sz√°ma: ${workItem.workDiaryItems.length}`);
        
        if (workItem.workDiaryItems.length > 0) {
          console.log(`   üìä Napl√≥ r√©szletek:`);
          workItem.workDiaryItems.forEach((diary, index) => {
            console.log(`      ${index + 1}. ${diary.date.toISOString().split('T')[0]} - quantity: ${diary.quantity}, progressAtDate: ${diary.progressAtDate}`);
          });
        }
        console.log('');
      } else {
        console.log(`‚úÖ OK - ${workItem.name}: ${completedQuantity} ${workItem.unit}`);
      }
    }

    console.log('\nüìà √ñSSZEFOGLAL√ì:');
    console.log(`   Vizsg√°lt WorkItem-ek: ${totalCount}`);
    console.log(`   Konzisztens: ${totalCount - inconsistentCount}`);
    console.log(`   Elt√©r≈ë: ${inconsistentCount}`);
    
    if (inconsistentCount === 0) {
      console.log('üéâ Minden adat konzisztens!');
    } else {
      console.log(`‚ö†Ô∏è  ${inconsistentCount} WorkItem-n√©l van elt√©r√©s!`);
    }

  } catch (error) {
    console.error('‚ùå Hiba az ellen≈ërz√©s sor√°n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Futtat√°s
checkQuantityConsistency();
