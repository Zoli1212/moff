generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_NEON_DB_CONNECTION_STRING")
}

model Email {
  id                  Int      @id @default(autoincrement())
  gmailId             String   @unique
  from                String
  subject             String
  content             String
  hasAttachment       Boolean  @default(false)
  attachmentFilenames String[]
  attachmentUrls      String[]
  tenantEmail         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  myWorkId            Int?
  myWork              MyWork?  @relation(fields: [myWorkId], references: [id])
}

model PriceItem {
  id          Int    @id @default(autoincrement())
  name        String
  price       Float
  unit        String
  quantity    Float? @default(1)
  tenantEmail String
}

model User {
  id           Int      @id @default(autoincrement())
  clerkId      String?  @unique
  name         String
  email        String   @unique
  role         String   @default("USER")
  isSuperUser  Boolean  @default(false)
  theme        String   @default("landing")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model History {
  id          Int     @id @default(autoincrement())
  recordId    String
  content     Json?
  userEmail   String?
  createdAt   String?
  aiAgentType String?
  metaData    Json?   @db.Json
  fileType    String?
  fileName    String?
  fileUrl     String?
  tenantEmail String
}

model Client {
  id           String   @id @default(uuid())
  companyName  String
  contactName  String
  contactPhone String
  contactEmail String
  demand       String
  offer        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantEmail  String
}

model MyWork {
  id            Int           @id @default(autoincrement())
  title         String
  customerName  String
  customerPhone String?
  customerEmail String?
  date          DateTime
  location      String
  time          String
  totalPrice    Float
  description   String?
  workflowId    Int?
  workflow      Workflow?     @relation(fields: [workflowId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tenantEmail   String
  emails        Email[]
  requirements  Requirement[]
}

model Requirement {
  id                     Int           @id @default(autoincrement())
  title                  String
  description            String?
  versionNumber          Int
  status                 String       @default("draft")
  myWorkId              Int
  myWork                MyWork        @relation(fields: [myWorkId], references: [id])
  previousRequirementId  Int?
  previousVersion       Requirement?  @relation("RequirementVersions", fields: [previousRequirementId], references: [id])
  nextVersions          Requirement[] @relation("RequirementVersions")
  offers                Offer[]
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  updateCount           Int          @default(1)

  itemsBlocks          RequirementItemsBlock[]

  @@unique([myWorkId, versionNumber])
  @@index([previousRequirementId])
}

model RequirementItemsBlock {
  id            Int          @id @default(autoincrement())
  requirement   Requirement  @relation(fields: [requirementId], references: [id])
  requirementId Int
  blockText     String
  createdAt     DateTime     @default(now())
}

model Offer {
  id             Int         @id @default(autoincrement())
  title          String
  description    String?
  totalPrice     Float
  materialTotal  Float?      @default(0)
  workTotal      Float?      @default(0)
  status         String      @default("draft")
  requirementId  Int
  requirement    Requirement @relation(fields: [requirementId], references: [id])
  items          Json?
  recordId       String?     @unique(map: "unique_offer_record_id")
  validUntil     DateTime?
  notes          String?
  offerSummary   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdBy      String?
  tenantEmail    String      @default("")
  work           Work?       @relation("OfferWork")
  billings       Billing[]   // Kapcsolat az új Billing modellhez
  performances   Performance[] // Kapcsolat a Performance táblához
  
  @@unique([recordId])
}

model Work {
  id                Int         @id @default(autoincrement())
  title             String      
  offerId           Int         @unique
  offer             Offer       @relation("OfferWork", fields: [offerId], references: [id], onDelete: Cascade)
  offerDescription  String?     
  status            String      @default("pending") // e.g., pending, in_progress, completed, on_hold, cancelled
  startDate         DateTime?
  endDate           DateTime?
  location          String?
  workItems         WorkItem[]
  workDiaries       WorkDiary[]
  workTools         WorkToolsRegistry[]
  
  totalWorkers   Int         @default(0)
  maxRequiredWorkers Int?    @default(0)
  totalLaborCost Float?      @default(0)
  
  totalTools     Int         @default(0)
  totalToolCost  Float?      @default(0)
  
  totalMaterials Int        @default(0)
  totalMaterialCost Float?   @default(0)
  
  // Aggregált teljesítési értékek (gyors lekéréshez)
  totalCompleted Float?      @default(0) // Összes teljesített mennyiség
  totalBilled    Float?      @default(0) // Összes számlázott mennyiség
  totalBillable  Float?      @default(0) // Összes számlázható mennyiség
  
  estimatedDuration String?  
  progress         Float?    @default(0) 
  workSummary      String?   // AI által generált 4 mondatos összefoglaló

  isActive        Boolean    @default(true)

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenantEmail    String      @default("")
  
  workers       Worker[]
  workItemWorkers WorkItemWorker[]
  tools         Tool[]
  materials     Material[]
  workDiaryItems WorkDiaryItem[]
  offerItems    Json?  
  updatedByAI   Boolean   @default(false)
  workImageUrl  String?   // Kép URL a munkához
  performances  Performance[] // Kapcsolat a Performance táblához
  workforcePerformances WorkforceRegistryPerformance[] // Kapcsolat a munkás teljesítményekhez
  billings      Billing[] // Kapcsolat a számlákhoz
}

model WorkItem {
  id                Int         @id @default(autoincrement())
  workId            Int
  work              Work        @relation(fields: [workId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  quantity          Float       @default(1)
  unit              String
  unitPrice         Float
  materialUnitPrice Float?
  workTotal         Float?
  materialTotal     Float?
  totalPrice        Float
  workers        Worker[]
  tools          Tool[]
  materials      Material[]
  workDiaryEntries WorkDiary[]
  workItemWorkers WorkItemWorker[]
  workDiaryItems WorkDiaryItem[]
  completedQuantity Float?   @default(0)
  billedQuantity    Float?   @default(0)  // Már kiszámlázott mennyiség
  paidQuantity      Float?   @default(0)  // Pénzügyileg teljesített mennyiség (készpénzes fizetés)
  progress       Int?      @default(0)
  inProgress     Boolean   @default(false)
  modifiedQuantity Float?  // Tenant által módosított mennyiség
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenantEmail    String      @default("")
}

model Worker {
  id             Int         @id @default(autoincrement())
  name           String
  role           String?
  workId         Int
  work           Work        @relation(fields: [workId], references: [id], onDelete: Cascade)
  workItemId     Int?
  workItem       WorkItem?   @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  hourlyRate     Float?
  hoursWorked    Float?      @default(0)
  contactInfo    String?
  hired          Boolean?    @default(false) // optional: is the worker hired
  maxRequired    Int?        // maximum required workers for this profession (optional)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenantEmail    String      @default("")
  workItemWorkers WorkItemWorker[] @relation("WorkerToWorkItemWorker")
  workDiaryItems WorkDiaryItem[]
  workers        Json?      
 
}

model Tool {
  id             Int         @id @default(autoincrement())
  name           String
  workId         Int
  work           Work        @relation(fields: [workId], references: [id], onDelete: Cascade)
  workItemId     Int
  workItem       WorkItem    @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  quantity       Int         @default(1)
  dailyRate      Float?
  daysUsed       Float?      @default(0)
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenantEmail    String      @default("")
}

model Material {
  id             Int         @id @default(autoincrement())
  name           String
  workId         Int
  work           Work        @relation(fields: [workId], references: [id], onDelete: Cascade)
  workItemId     Int
  workItem       WorkItem    @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  quantity       Float       @default(1)
  availableFull  Boolean     @default(false)
  availableQuantity Int     @default(0)
  unit           String
  unitPrice      Float
  totalPrice     Float
  supplierInfo   String?
  deliveryDate   DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenantEmail    String      @default("")
}

model WorkDiary {
  id             Int         @id @default(autoincrement())
  workId         Int
  work           Work        @relation(fields: [workId], references: [id], onDelete: Cascade)
  workItemId     Int
  workItem       WorkItem    @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  date           DateTime    @default(now())
  description    String
  weather        String?
  temperature    Float?
  progress       Float?      // 0-100 percentage
  issues         String?
  notes          String?
  reportedById   String?     // Could be linked to a User model if needed
  reportedByName String?
  images         String[]    // URLs to stored images
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenantEmail    String      @default("")
  workDiaryItems WorkDiaryItem[]
}

model MyInvoices {
  id              Int      @id @default(autoincrement())
  invoiceNumber   String
  issueDate       DateTime
  dueDate         DateTime
  sellerName      String
  sellerTaxNumber String
  buyerName       String
  buyerTaxNumber  String
  netAmount       Float?
  vatRate         Float?
  vatAmount       Float?
  grossAmount     Float?
  totalAmount     Float?
  currency        String?  @default("HUF")
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tenantEmail     String
}

model WorkItemWorker {
  id         Int      @id @default(autoincrement())
  work       Work?    @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId     Int?
  workItem   WorkItem? @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  workItemId Int?
  worker     Worker   @relation("WorkerToWorkItemWorker", fields: [workerId], references: [id], onDelete: Cascade)
  workerId   Int
  workforceRegistry   WorkforceRegistry? @relation(fields: [workforceRegistryId], references: [id])
  workforceRegistryId Int?
  quantity   Int      @default(1)
  role       String?
  email      String?
  name       String?
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenantEmail String   @default("")
  avatarUrl String?
  // Back-relation for WorkDiaryItem.workItemWorker
  workDiaryItems WorkDiaryItem[]
}

model myPrompt {
  id          Int      @id @default(autoincrement())
  prompt      String
  description String?
  tenantEmail String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GoogleOAuthCredential {
  id                          Int      @id @default(autoincrement())
  client_id                   String
  project_id                  String
  auth_uri                    String
  token_uri                   String
  auth_provider_x509_cert_url String
  client_secret               String
  redirect_uris               Json
  tenantEmail                 String
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model Workflow {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String?
  isActive          Boolean             @default(true)
  tenantEmail       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  phases            Phase[]
  myWorks           MyWork[]
  Specialty         Specialty?          @relation(fields: [specialtyId], references: [id])
  specialtyId       Int?
  WorkflowSpecialty WorkflowSpecialty[]
}

model Phase {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  order       Int
  workflowId  Int
  workflow    Workflow @relation(fields: [workflowId], references: [id])
  tasks       Task[]
  tenantEmail String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([workflowId, order])
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  item String?
  isCompleted Boolean  @default(false)
  order       Int?
  phaseId     Int?
  phase       Phase?    @relation(fields: [phaseId], references: [id])
  tenantEmail String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([phaseId, order])
}

model Specialty {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  description       String?
  tenantEmail       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  workflows         Workflow[]
  WorkflowSpecialty WorkflowSpecialty[]
}

model WorkflowSpecialty {
  workflowId  Int
  specialtyId Int
  workflow    Workflow  @relation(fields: [workflowId], references: [id])
  specialty   Specialty @relation(fields: [specialtyId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([workflowId, specialtyId])
}

model PriceList {
  id            Int      @id @default(autoincrement())
  category      String
  task          String
  technology    String
  unit          String
  laborCost     Int
  materialCost  Int
  tenantEmail   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([task, tenantEmail], name: "task_tenantEmail")
}

model WorkforceRegistry {
  id                 Int      @id @default(autoincrement())
  name               String
  role               String
  email              String?
  phone              String?
  contactInfo        String?
  hiredDate          DateTime?
  leftDate           DateTime?
  isActive           Boolean  @default(true)
  isDeleted          Boolean  @default(false)
  notes              String?
  dailyRate          Float?   @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  tenantEmail        String   @default("")
  workItemWorkers    WorkItemWorker[]
  avatarUrl          String?
  performances       WorkforceRegistryPerformance[]
  salaryHistory      WorkforceRegistrySalaryHistory[]
  workDiaryItems     WorkDiaryItem[]
}

model WorkforceRegistrySalaryHistory {
  id                  Int      @id @default(autoincrement())
  workforceRegistryId Int
  dailyRate           Float
  validFrom           DateTime  // Mikortól érvényes (nincs validTo!)
  createdAt           DateTime @default(now())
  tenantEmail         String   @default("")
  
  workforceRegistry WorkforceRegistry @relation(fields: [workforceRegistryId], references: [id], onDelete: Cascade)
  
  @@index([workforceRegistryId, validFrom])
  @@index([tenantEmail])
}

model EquipmentRegistry {
  id                 Int      @id @default(autoincrement())
  name               String
  quantity           Float
  unit               String
  currentlyAvailable Boolean  @default(false)
  description        String?
  acquiredAt         DateTime?
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  tenantEmail        String   @default("")
}

model MaterialRegistry {
  id                 Int      @id @default(autoincrement())
  name               String
  amount             Float
  unit               String
  currentlyAvailable Boolean  @default(false)
  description        String?
  supplier           String?
  acquiredAt         DateTime?
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  tenantEmail        String   @default("")
}

model ToolsRegistry {
  id          Int      @id @default(autoincrement())
  name        String
  displayName    String?
  quantity    Int
  description String?
  avatarUrl String?
  tenantEmail String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workTools   WorkToolsRegistry[]
}

model WorkToolsRegistry {
  id             Int            @id @default(autoincrement())
  work           Work           @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId         Int
  tool           ToolsRegistry  @relation(fields: [toolId], references: [id], onDelete: Cascade)
  toolId         Int
  toolName       String         @default("")
  quantity       Int            // Hány darabot rendeltünk ehhez a munkához
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tenantEmail    String         @default("")
  availableFull  Boolean        @default(false)
  @@unique([workId, toolId])
}

model WorkDiaryItem {
  id            Int        @id @default(autoincrement())
  diaryId       Int
  diary         WorkDiary  @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  email         String     @default("")
  workId        Int
  work          Work       @relation(fields: [workId], references: [id], onDelete: Cascade)
  workItemId    Int
  workItem      WorkItem   @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  workerId      Int
  worker        Worker     @relation(fields: [workerId], references: [id], onDelete: Cascade)
  /// Optional: snapshot of the assigned name at the time of logging
  name          String?
  /// Optional: reference to the WorkItemWorker assignment used
  workItemWorker   WorkItemWorker? @relation(fields: [workItemWorkerId], references: [id])
  workItemWorkerId Int?
  /// Optional: reference to the WorkforceRegistry entry used
  workforceRegistry   WorkforceRegistry? @relation(fields: [workforceRegistryId], references: [id])
  workforceRegistryId Int?
  quantity      Float?
  unit String?
  workHours     Float?
  progressAtDate Float?    @default(0) // Progress at this specific date
  dailyRateSnapshot Float?  // Snapshot of the daily rate at the time of logging
  date          DateTime   @default(now())
  images        String[]
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  tenantEmail   String     @default("")
  accepted      Boolean    @default(false)
  groupNo       Int?
}

model TenantWorker {
  id            Int      @id @default(autoincrement())
  tenantEmail   String
  role          String             
  roleNormalized String                       
  totalAssigned Int      @default(0)
  lastSeenAt    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([tenantEmail, roleNormalized], map: "tenant_role_unique_norm")
}

model Billing {
  id             Int         @id @default(autoincrement())
  title          String
  description    String?
  totalPrice     Float
  status         String      @default("draft") // Lehetséges állapotok: draft, sent, paid, overdue
  offerId        Int         // Kapcsolat az eredeti ajánlathoz
  offer          Offer       @relation(fields: [offerId], references: [id])
  workId         Int?        // Kapcsolat a munkához (opcionális)
  work           Work?       @relation(fields: [workId], references: [id])
  items          Json?       // Ugyanaz a struktúra, mint az Offer.items
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdBy      String?
  tenantEmail    String      @default("")
  invoiceNumber  String?     // Hivatalos számlaszám
  issuedDate     DateTime?   // Kiállítás dátuma
  dueDate        DateTime?   // Fizetési határidő
  invoicePdfUrl  String?     // Számla PDF linkje
  taxNumber      String?     // Adószám (opcionális)
  euTaxNumber    String?     // EU adószám (opcionális)
  customerTitle  String?     // Vevő neve/címe (opcionális) - DEPRECATED, use separate fields below
  customerName   String?     // Vevő neve
  customerCity   String?     // Vevő városa
  customerAddress String?    // Vevő utca/házszám
  customerZip    String?     // Vevő irányítószám
}

model Performance {
  id                    Int         @id @default(autoincrement())
  
  // KÖTELEZŐ mezők (amit említettél)
  offerPrice            Float       // Ajánlat díja (eredeti ajánlott ár) - KÖTELEZŐ
  ownCosts              Float       // Saját költségek - KÖTELEZŐ  
  expectedProfitPercent Float       // Százalékos elvárás (profit margin) - KÖTELEZŐ
  
  // OPCIONÁLIS mezők (minden más)
  title                 String?     // A teljesítmény megnevezése
  description           String?     // Részletes leírás
  
  // Opcionális pénzügyi adatok
  actualRevenue         Float?      // Tényleges bevétel
  materialCosts         Float?      // Anyagköltségek
  laborCosts            Float?      // Munkaerő költségek
  equipmentCosts        Float?      // Eszköz/gép költségek
  otherCosts            Float?      // Egyéb költségek
  
  // Opcionális százalékos mutatók
  actualProfitPercent   Float?      // Tényleges profit százalék
  costEfficiencyPercent Float?      // Költséghatékonyság százalék
  
  // Opcionális teljesítmény mutatók
  profit                Float?      // Profit (bevétel - összes költség)
  profitMargin          Float?      // Profit margin
  roi                   Float?      // Return on Investment
  
  // Opcionális időbeli adatok
  plannedDuration       Int?        // Tervezett időtartam (napokban)
  actualDuration        Int?        // Tényleges időtartam (napokban)
  startDate             DateTime?   // Kezdés dátuma
  endDate               DateTime?   // Befejezés dátuma
  
  // Opcionális kapcsolatok
  workId                Int?        // Kapcsolat a Work táblához
  work                  Work?       @relation(fields: [workId], references: [id])
  offerId               Int?        // Kapcsolat az Offer táblához
  offer                 Offer?      @relation(fields: [offerId], references: [id])
  
  // Opcionális státusz és kategorizálás
  status                String?     // active, completed, cancelled
  category              String?     // Kategória (pl. építkezés, felújítás, stb.)
  priority              String?     // low, medium, high
  
  // Opcionális értékelés és megjegyzések
  qualityRating         Float?      // Minőségi értékelés (1-10)
  customerSatisfaction  Float?      // Ügyfél elégedettség (1-10)
  notes                 String?     // Megjegyzések
  lessons               String?     // Tanulságok
  
  // Opcionális metaadatok
  createdBy             String?     // Ki hozta létre
  tenantEmail           String?     // Multi-tenant támogatás
  
  // Kötelező időbélyegek
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  // Indexek a gyorsabb lekérdezésekhez
  @@index([workId])
  @@index([offerId])
  @@index([status])
  @@index([tenantEmail])
}

model WorkforceRegistryPerformance {
  id                    Int                 @id @default(autoincrement())
  
  // Kapcsolat a WorkforceRegistry táblához
  workforceRegistryId   Int
  workforceRegistry     WorkforceRegistry   @relation(fields: [workforceRegistryId], references: [id], onDelete: Cascade)
  
  // Kapcsolat a Work táblához (melyik munkán dolgozott)
  workId                Int?
  work                  Work?               @relation(fields: [workId], references: [id])
  
  // Időszak és dátumok
  workDate              DateTime            // Munka dátuma
  periodStart           DateTime?           // Időszak kezdete (opcionális)
  periodEnd             DateTime?           // Időszak vége (opcionális)
  
  // Munka teljesítmény
  hoursWorked           Float               @default(0) // Ledolgozott órák
  daysWorked            Float?              @default(0) // Ledolgozott napok
  progressMade          Float?              @default(0) // Haladás százalékban (0-100)
  tasksCompleted        Int?                @default(0) // Elvégzett feladatok száma
  
  // Pénzügyi adatok
  dailyRate             Float?              // Napi díjszabás
  hourlyRate            Float?              // Órabér
  totalEarned           Float               @default(0) // Összesen keresett összeg
  bonusEarned           Float?              @default(0) // Bónusz
  overtimeHours         Float?              @default(0) // Túlóra órák
  overtimePay           Float?              @default(0) // Túlóra díj
  
  // Teljesítmény mutatók
  efficiency            Float?              // Hatékonyság százalék
  qualityScore          Float?              // Minőségi pontszám (1-10)
  punctuality           Boolean?            @default(true) // Pontos volt-e
  
  // Megjegyzések és jegyzetek
  notes                 String?             // Megjegyzések
  issues                String?             // Problémák, nehézségek
  achievements          String?             // Eredmények, kiemelkedő teljesítmény
  
  // Metaadatok
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  tenantEmail           String              @default("")
  createdBy             String?             // Ki rögzítette
  
  // Indexek
  @@index([workforceRegistryId])
  @@index([workId])
  @@index([workDate])
  @@index([tenantEmail])
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  content     String   // RAG kontextus szöveg
  category    String   // 'pricing', 'materials', 'processes', 'regulations'
  metadata    Json?    // További adatok (source, keywords, stb.)
  tenantEmail String   // Tenant izolálás
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantEmail])
  @@index([category])

}
