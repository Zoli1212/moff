generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_NEON_DB_CONNECTION_STRING")
}

model Email {
  id                  Int      @id @default(autoincrement())
  gmailId             String   @unique
  from                String
  subject             String
  content             String
  hasAttachment       Boolean  @default(false)
  attachmentFilenames String[]
  attachmentUrls      String[]
  tenantEmail         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  myWorkId            Int?
  myWork              MyWork?  @relation(fields: [myWorkId], references: [id])
}

model PriceItem {
  id          Int    @id @default(autoincrement())
  name        String
  price       Float
  unit        String
  quantity    Float? @default(1)
  tenantEmail String
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id          Int     @id @default(autoincrement())
  recordId    String
  content     Json?
  userEmail   String?
  createdAt   String?
  aiAgentType String?
  metaData    Json?   @db.Json
  fileType    String?
  fileName    String?
  fileUrl     String?
  tenantEmail String
}

model Client {
  id           String   @id @default(uuid())
  companyName  String
  contactName  String
  contactPhone String
  contactEmail String
  demand       String
  offer        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantEmail  String
}

model MyWork {
  id            Int           @id @default(autoincrement())
  title         String
  customerName  String
  customerPhone String?
  customerEmail String?
  date          DateTime
  location      String
  time          String
  totalPrice    Float
  description   String?
  workflowId    Int?
  workflow      Workflow?     @relation(fields: [workflowId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tenantEmail   String
  emails        Email[]
  requirements  Requirement[]
}

model Requirement {
  id                     Int           @id @default(autoincrement())
  title                  String
  description            String?
  versionNumber          Int
  status                 String       @default("draft")
  myWorkId              Int
  myWork                MyWork        @relation(fields: [myWorkId], references: [id])
  previousRequirementId  Int?
  previousVersion       Requirement?  @relation("RequirementVersions", fields: [previousRequirementId], references: [id])
  nextVersions          Requirement[] @relation("RequirementVersions")
  offers                Offer[]
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  @@unique([myWorkId, versionNumber])
  @@index([previousRequirementId])
}

model Offer {
  id             Int         @id @default(autoincrement())
  title          String
  description    String?
  totalPrice     Float
  status         String     @default("draft")
  requirementId  Int
  requirement    Requirement @relation(fields: [requirementId], references: [id])
  items          Json?
  validUntil     DateTime?
  notes          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      String?
}

model MyInvoices {
  id              Int      @id @default(autoincrement())
  invoiceNumber   String
  issueDate       DateTime
  dueDate         DateTime
  sellerName      String
  sellerTaxNumber String
  buyerName       String
  buyerTaxNumber  String
  netAmount       Float?
  vatRate         Float?
  vatAmount       Float?
  grossAmount     Float?
  totalAmount     Float?
  currency        String?  @default("HUF")
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tenantEmail     String
}

model myPrompt {
  id          Int      @id @default(autoincrement())
  prompt      String
  description String?
  tenantEmail String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GoogleOAuthCredential {
  id                          Int      @id @default(autoincrement())
  client_id                   String
  project_id                  String
  auth_uri                    String
  token_uri                   String
  auth_provider_x509_cert_url String
  client_secret               String
  redirect_uris               Json
  tenantEmail                 String
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model Workflow {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String?
  isActive          Boolean             @default(true)
  tenantEmail       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  phases            Phase[]
  myWorks           MyWork[]
  Specialty         Specialty?          @relation(fields: [specialtyId], references: [id])
  specialtyId       Int?
  WorkflowSpecialty WorkflowSpecialty[]
}

model Phase {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  order       Int
  workflowId  Int
  workflow    Workflow @relation(fields: [workflowId], references: [id])
  tasks       Task[]
  tenantEmail String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([workflowId, order])
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  item String?
  isCompleted Boolean  @default(false)
  order       Int?
  phaseId     Int?
  phase       Phase?    @relation(fields: [phaseId], references: [id])
  tenantEmail String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([phaseId, order])
}

model Specialty {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  description       String?
  tenantEmail       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  workflows         Workflow[]
  WorkflowSpecialty WorkflowSpecialty[]
}

model WorkflowSpecialty {
  workflowId  Int
  specialtyId Int
  workflow    Workflow  @relation(fields: [workflowId], references: [id])
  specialty   Specialty @relation(fields: [specialtyId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([workflowId, specialtyId])
}
